repo - это то, где хранятся ваши файлы под управлением гит
git init - инициализирует пустой репозиторий
git config --global user.name "Your Name"  - установить имя
git config --global user.email your@email.com  - установить почту

file .gitignore - это файл в котором нужно записывать
    игнорируемые гитом файлы

git status - покажет состояние репо(ветка, добавленные/не добавленные
    файлы, измененные файлы)

git add .  - добавить в отслеживаемые все файлы

git commit -m "Your commit message"  - добавить коммит в текущую ветку
    с сообщением(записывается в кавычках)

git log  - показать историю гита

git remote -v  - показать список удаленных репо
git remote add origin link_to_repo  - добавить удаленный репозиторий,
    назвать его локально origin, поставить в соответствие ссылку link_to_repo

git push origin master   - отправить коммиты из текущей ветки на
    удаленный репо, с названием origin, в ветку master(на удаленном репо)

git pull origin master  - стянуть изменения из удаленного репо origin
    из ветки master

git branch  -  список веток
git branch newbranch  -  создать новую ветку по имени newbranch(отбренчеваться)
git checkout newbranch  - перейти на ветку newbranch
git checkout -b newbranch  - создать новую ветку newbranch и перейти на новую ветку newbranch

Для того, чтоб объединить данные из двух веток, их нужно слить(merge).
Для того чтоб сделать запрос на слияние делается pull request(github)/
merge request(gitlab).

git merge some_branch  - слить изменения из ветки some_branch в текущую ветку(созд комит)
git rebase some_branch   - сделать ребейс по отношению к some_branch с текущей веткой

########### HOW RESOLVE CONFLICTS(in pull request) ############
1) git merge / git rebase
2) resolve conflicts(with hands)
3) git merge --continue  (git rebase --continue)
4) нажать q или ctrl+c
5) git pull origin current_branch
6) git push origin current_branch
########### HOW RESOLVE CONFLICTS(in pull request) ############
